{% block nosto_integration_content_card_channel_config_features_flags_card %}
    <sw-card
        class="sw-card--grid"
        :title="$tc('nosto.configuration.featuresFlags.cardTitle')"
        positionIdentifier="nosto-integration-features-flags"
    >
        {% block nosto_integration_feature_product_identifier %}
            <sw-inherit-wrapper
                :value="currentConfig['productIdentifier']"
                :inheritedValue="configKey === null ? null : configs['null']['productIdentifier']"
                :label="$tc('nosto.configuration.featuresFlags.productIdentifier')"
                :help-text="$tc('nosto.configuration.featuresFlags.productIdentifierHelpText')"
                @update:value="onUpdateValue('productIdentifier', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="productIdentifier"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createProductIdentifierOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('productIdentifier', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_ratings_reviews %}
            <sw-inherit-wrapper
                :value="currentConfig['ratingsReviews']"
                :inheritedValue="configKey === null ? null : configs['null']['ratingsReviews']"
                :label="$tc('nosto.configuration.featuresFlags.enableRatingsReviews')"
                :help-text="$tc('nosto.configuration.featuresFlags.enableRatingsReviewsHelpText')"
                @update:value="onUpdateValue('ratingsReviews', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="ratingsReviews"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createRatingsAndReviewOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('ratingsReviews', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_stock_field %}
            <sw-inherit-wrapper
                :value="currentConfig['stockField']"
                :inheritedValue="configKey === null ? null : configs['null']['stockField']"
                :label="$tc('nosto.configuration.featuresFlags.stockField')"
                :help-text="$tc('nosto.configuration.featuresFlags.stockFieldHelpText')"
                @update:value="onUpdateValue('stockField', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="stockField"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createStockOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('stockField', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_cross_selling_sync %}
            <sw-inherit-wrapper
                :value="currentConfig['crossSellingSync']"
                :inheritedValue="configKey === null ? null : configs['null']['crossSellingSync']"
                :label="$tc('nosto.configuration.featuresFlags.crossSellingSync')"
                :help-text="$tc('nosto.configuration.featuresFlags.crossSellingSyncHelpText')"
                @update:value="onUpdateValue('crossSellingSync', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="crossSellingSync"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createCrossSellingSyncOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('crossSellingSync', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_category_naming %}
            <sw-inherit-wrapper
                :value="currentConfig['categoryNaming']"
                :inheritedValue="configKey === null ? null : configs['null']['categoryNaming']"
                :label="$tc('nosto.configuration.featuresFlags.categoryNaming')"
                :help-text="$tc('nosto.configuration.featuresFlags.categoryNamingHelpText')"
                @update:value="onUpdateValue('categoryNaming', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="categoryNaming"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createCategoryNamingOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('categoryNaming', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_category_blocklist %}
            <sw-inherit-wrapper
                :value="currentConfig['categoryBlocklist']"
                :inheritedValue="configKey === null ? null : configs['null']['categoryBlocklist']"
                :label="$tc('nosto.configuration.featuresFlags.categoryBlocklist')"
                :help-text="$tc('nosto.configuration.featuresFlags.categoryBlocklistHelpText')"
                @update:value="onUpdateValue('categoryBlocklist', $event)"
            >
                <template #content="props">
                    <sw-category-tree-field
                        name="categoryBlocklist"
                        :categories-collection="categoryCollection"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        :placeholder="$tc('nosto.configuration.featuresFlags.categoryBlocklistPlaceholder')"
                        show-clearable-button
                        @selection-add="onCategoryAdd"
                        @selection-remove="onCategoryRemove"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_variations %}
            <sw-inherit-wrapper
                :value="currentConfig['variations']"
                :inheritedValue="configKey === null ? null : configs['null']['variations']"
                @update:value="onUpdateValue('variations', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="variations"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableVariations')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableVariationsHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('variations', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_product_properties %}
            <sw-inherit-wrapper
                :value="currentConfig['productProperties']"
                :inheritedValue="configKey === null ? null : configs['null']['productProperties']"
                @update:value="onUpdateValue('productProperties', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="productProperties"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableProductProperties')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableProductPropertiesHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('productProperties', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_alternate_image %}
            <sw-inherit-wrapper
                :value="currentConfig['alternateImages']"
                :inheritedValue="configKey === null ? null : configs['null']['alternateImages']"
                @update:value="onUpdateValue('alternateImages', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="alternateImages"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableAlternateImages')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableAlternateImagesHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('alternateImages', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_inventory %}
            <sw-inherit-wrapper
                :value="currentConfig['inventory']"
                :inheritedValue="configKey === null ? null : configs['null']['inventory']"
                @update:value="onUpdateValue('inventory', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="inventory"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableInventory')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableInventoryHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('inventory', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_customer_data %}
            <sw-inherit-wrapper
                :value="currentConfig['customerDataToNosto']"
                :inheritedValue="configKey === null ? null : configs['null']['customerDataToNosto']"
                @update:value="onUpdateValue('customerDataToNosto', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="customerDataToNosto"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableCustomerDataToNosto')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableCustomerDataToNostoHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('customerDataToNosto', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_inavtive_products %}
            <sw-inherit-wrapper
                :value="currentConfig['syncInactiveProducts']"
                :inheritedValue="configKey === null ? null : configs['null']['syncInactiveProducts']"
                @update:value="onUpdateValue('syncInactiveProducts', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="syncInactiveProducts"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableSyncInactiveProducts')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableSyncInactiveProductsHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('syncInactiveProducts', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_published_date %}
            <sw-inherit-wrapper
                :value="currentConfig['productPublishedDateTagging']"
                :inheritedValue="configKey === null ? null : configs['null']['productPublishedDateTagging']"
                @update:value="onUpdateValue('productPublishedDateTagging', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="productPublishedDateTagging"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableProductPublishedDateTagging')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableProductPublishedDateTaggingHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('productPublishedDateTagging', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_recommendations %}
            <sw-inherit-wrapper
                :value="currentConfig['reloadRecommendations']"
                :inheritedValue="configKey === null ? null : configs['null']['reloadRecommendations']"
                @update:value="onUpdateValue('reloadRecommendations', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="reloadRecommendations"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableReloadRecommendations')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableReloadRecommendationsHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('reloadRecommendations', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_labelling %}
            <sw-inherit-wrapper
                :value="currentConfig['enableLabelling']"
                :inheritedValue="configKey === null ? null : configs['null']['enableLabelling']"
                @update:value="onUpdateValue('enableLabelling', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="enableLabelling"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableLabelling')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableLabellingHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('enableLabelling', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_store_abandoned_cart_data %}
            <sw-inherit-wrapper
                :value="currentConfig['storeAbandonedCartData']"
                :inheritedValue="configKey === null ? null : configs['null']['storeAbandonedCartData']"
                @update:value="onUpdateValue('storeAbandonedCartData', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="storeAbandonedCartData"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.storeAbandonedCartData')"
                        :help-text="$tc('nosto.configuration.featuresFlags.storeAbandonedCartDataHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('storeAbandonedCartData', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_feature_ignore_cookie_consent %}
            <sw-inherit-wrapper
                :value="currentConfig['ignoreCookieConsent']"
                :inheritedValue="configKey === null ? null : configs['null']['ignoreCookieConsent']"
                @update:value="onUpdateValue('ignoreCookieConsent', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="ignoreCookieConsent"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.ignoreCookieConsent')"
                        :help-text="$tc('nosto.configuration.featuresFlags.ignoreCookieConsentHelpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('ignoreCookieConsent', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_daily_synchronization_flag %}
            <sw-inherit-wrapper
                v-if="configKey === null"
                :value="currentConfig['dailySynchronization']"
                :inheritedValue="configKey === null ? null : configs['null']['dailySynchronization']"
                @update:value="onUpdateValue('dailySynchronization', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="dailySynchronization"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.enableDailySynchronization')"
                        :help-text="$tc('nosto.configuration.featuresFlags.enableDailySynchronizationHelp')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('dailySynchronization', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_daily_synchronization_time %}
            <sw-inherit-wrapper
                v-if="configKey === null && currentConfig['dailySynchronization']"
                :value="currentConfig['dailySynchronizationTime']"
                :inheritedValue="configKey === null ? null : configs['null']['dailySynchronizationTime']"
                @update:value="onUpdateValue('dailySynchronizationTime', $event)"
            >
                <template #content="props">
                    <sw-datepicker
                        name="dailySynchronizationTime"
                        :map-inheritance="props"
                        :value="props.currentValue"
                        :disabled="props.isInherited"
                        date-type="time"
                        :label="$tc('nosto.configuration.featuresFlags.timeDailySynchronization')"
                        :help-text="$tc('nosto.configuration.featuresFlags.timeDailySynchronizationHelp')"
                        @update:value="onUpdateValue('dailySynchronizationTime', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_old_job_cleanup_flag %}
            <sw-inherit-wrapper
                v-if="configKey === null"
                :value="currentConfig['oldJobCleanup']"
                :inheritedValue="configKey === null ? null : configs['null']['oldJobCleanup']"
                @update:value="onUpdateValue('oldJobCleanup', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="oldJobCleanup"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.oldJobCleanup.label')"
                        :help-text="$tc('nosto.configuration.featuresFlags.oldJobCleanup.helpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('oldJobCleanup', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_old_job_cleanup_period %}
            <sw-inherit-wrapper
                v-if="configKey === null && currentConfig['oldJobCleanup']"
                :value="currentConfig['oldJobCleanupPeriod']"
                :inheritedValue="configKey === null ? null : configs['null']['oldJobCleanupPeriod']"
                @update:value="onUpdateValue('oldJobCleanupPeriod', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="oldJobCleanupPeriod"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createOldJobCleanupPeriodOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('oldJobCleanupPeriod', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_old_nosto_data_cleanup_flag %}
            <sw-inherit-wrapper
                v-if="configKey === null"
                :value="currentConfig['oldNostoDataCleanup']"
                :inheritedValue="configKey === null ? null : configs['null']['oldNostoDataCleanup']"
                @update:value="onUpdateValue('oldNostoDataCleanup', $event)"
            >
                <template #content="props">
                    <sw-switch-field
                        name="oldNostoDataCleanup"
                        :map-inheritance="props"
                        :label="$tc('nosto.configuration.featuresFlags.oldNostoDataCleanup.label')"
                        :help-text="$tc('nosto.configuration.featuresFlags.oldNostoDataCleanup.helpText')"
                        :disabled="props.isInherited"
                        :value="props.currentValue"
                        @update:value="onUpdateValue('oldNostoDataCleanup', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}

        {% block nosto_integration_old_nosto_data_cleanup_period %}
            <sw-inherit-wrapper
                v-if="configKey === null && currentConfig['oldNostoDataCleanup']"
                :value="currentConfig['oldNostoDataCleanupPeriod']"
                :inheritedValue="configKey === null ? null : configs['null']['oldNostoDataCleanupPeriod']"
                @update:value="onUpdateValue('oldNostoDataCleanupPeriod', $event)"
            >
                <template #content="props">
                    <sw-single-select
                        name="oldNostoDataCleanupPeriod"
                        labelProperty="label"
                        valueProperty="value"
                        :options="createOldNostoDataCleanupPeriodOptions"
                        :isInherited="props.isInherited"
                        :disabled="props.isInherited"
                        show-clearable-button
                        :value="props.currentValue"
                        @update:value="onUpdateValue('oldNostoDataCleanupPeriod', $event)"
                    />
                </template>
            </sw-inherit-wrapper>
        {% endblock %}
    </sw-card>
{% endblock %}
