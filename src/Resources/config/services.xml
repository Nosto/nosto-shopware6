<?xml version="1.0" ?>

<container
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd"
>
    <imports>
        <import resource="imports/*" />
    </imports>

    <services>
        <defaults autowire="true" />

        <!-- Handlers -->
        <service id="Nosto\NostoIntegration\Model\Operation\FullCatalogSyncHandler">
            <tag name="nosto.job_handler" code="nosto-integration-full-catalog-sync" />

            <argument key="$productRepository" type="service" id="product.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Operation\ProductSyncHandler">
            <tag name="nosto.job_handler" code="nosto-integration-product-sync" />

            <argument key="$channelContextFactory" type="service" id="Shopware\Core\System\SalesChannel\Context\SalesChannelContextFactory" />
            <argument key="$productProvider" type="service" id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\CachedProvider" />
            <argument key="$ruleLoader" type="service" id="Shopware\Core\Checkout\Cart\RuleLoader" />
            <argument key="$salesChannelProductRepository" type="service" id="sales_channel.product.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Operation\OrderSyncHandler">
            <tag name="nosto.job_handler" code="nosto-integration-order-sync" />

            <argument key="$orderRepository" type="service" id="order.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Operation\EntityChangelogSyncHandler">
            <tag name="nosto.job_handler" code="nosto-integration-entity-changelog-sync" />

            <argument key="$entityChangelogRepository" type="service" id="nosto_integration_entity_changelog.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\OldJobCleanupScheduledTaskHandler">
            <tag name="messenger.message_handler" />

            <argument key="$scheduledTaskRepository" type="service" id="scheduled_task.repository" />
            <argument key="$jobRepository" type="service" id="nosto_scheduler_job.repository" />
            <argument key="$logger" type="service" id="monolog.logger.nosto_integration" />
        </service>

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\EntityChangelogScheduledTaskHandler">
            <tag name="messenger.message_handler" />

            <argument key="$scheduledTaskRepository" type="service" id="scheduled_task.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\DailyProductSyncScheduledTaskHandler" lazy="true">
            <tag name="messenger.message_handler" />

            <argument key="$scheduledTaskRepository" type="service" id="scheduled_task.repository" />
            <argument key="$logger" type="service" id="monolog.logger.nosto_integration" />
            <argument key="$cache" type="service" id="cache.object" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Operation\MarketingPermissionSyncHandler">
            <tag name="nosto.job_handler" code="nosto-integration-marketing-permission-sync" />

            <argument type="service" id="newsletter_recipient.repository" />
        </service>
        <!-- /Handlers -->

        <!-- Services -->
        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\Category\TreeBuilder" />

        <service id="Nosto\NostoIntegration\Model\Nosto\Account\Provider">
            <argument key="$channelRepo" type="service" id="sales_channel.repository" />
            <argument key="$logger" type="service" id="monolog.logger.nosto_integration" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\SkuBuilder" />

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Helper\ProductHelper">
            <argument key="$productRepository" type="service" id="product.repository" />
            <argument key="$productRoute" type="service" id="Shopware\Core\Content\Product\SalesChannel\Detail\ProductDetailRoute" />
            <argument key="$reviewRepository" type="service" id="product_review.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\Builder">
            <argument key="$tagRepository" type="service" id="tag.repository" />
            <argument key="$categoryRepository" type="service" id="sales_channel.category.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\Provider" lazy="true" />

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\CachedProvider">
            <argument key="$cache" type="service" id="cache.object" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Order\Status\Builder" />

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\OldJobCleanupScheduledTask">
            <tag name="shopware.scheduled.task" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\CrossSelling\CrossSellingBuilder">
            <argument key="$crossSellingRepository" type="service" id="product_cross_selling.repository" />
            <argument key="$productStreamBuilder" type="service" id="Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder" />
            <argument key="$productRepository" type="service" id="sales_channel.product.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\EntityChangelogScheduledTask">
            <tag name="shopware.scheduled.task" />
        </service>

        <service id="Nosto\NostoIntegration\Service\ScheduledTask\DailyProductSyncScheduledTask">
            <tag name="shopware.scheduled.task" />
        </service>

        <service id="Nosto\NostoIntegration\Async\EventsWriter" lazy="true">
            <argument key="$changelogRepository" type="service" id="nosto_integration_entity_changelog.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Order\Builder">
            <argument key="$buyerBuilder" type="service" id="Nosto\NostoIntegration\Model\Nosto\Entity\Order\Buyer\Builder" />
        </service>

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Order\Buyer\Builder" />
        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Person\Builder" />
        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Order\Item\Builder" />
        <service id="Nosto\NostoIntegration\Utils\MigrationHelper" public="true" />

        <service id="nosto.plugin.assetservice.public" alias="Shopware\Core\Framework\Plugin\Util\AssetService" public="true" />

        <service id="Nosto\NostoIntegration\Model\Nosto\Entity\Customer\Builder">
            <argument key="$newsletterRecipientRepository" type="service" id="newsletter_recipient.repository" />
        </service>
        <!-- /Services -->

        <!-- Decorators -->
        <service
            id="Nosto\NostoIntegration\Decorator\Storefront\Framework\Cookie\NostoCookieProvider"
            decorates="Shopware\Storefront\Framework\Cookie\CookieProviderInterface"
        >
            <argument type="service" id="Nosto\NostoIntegration\Decorator\Storefront\Framework\Cookie\NostoCookieProvider.inner" />
        </service>

        <service
            id="Nosto\NostoIntegration\Decorator\Storefront\Theme\Twig\ThemeInheritanceBuilderDecorator"
            decorates="Shopware\Storefront\Theme\Twig\ThemeInheritanceBuilderInterface"
        >
            <argument type="service" id="Nosto\NostoIntegration\Decorator\Storefront\Theme\Twig\ThemeInheritanceBuilderDecorator.inner" />
        </service>
        <!-- /Decorators -->

        <!-- Entity Definitions -->
        <service id="Nosto\NostoIntegration\Entity\Changelog\ChangelogDefinition">
            <tag name="shopware.entity.definition" entity="nosto_integration_entity_changelog" />
        </service>
        <!-- /Entity Definitions -->

        <!-- Event Listeners -->
        <service id="Nosto\NostoIntegration\EventListener\ProductWrittenDeletedEvent">
            <tag name="kernel.event_subscriber" />
        </service>

        <service id="Nosto\NostoIntegration\EventListener\OrderWrittenEventListener">
            <tag name="kernel.event_subscriber" />
        </service>

        <service id="Nosto\NostoIntegration\EventListener\NewsletterEventListener">
            <tag name="kernel.event_subscriber" />
        </service>
        <!-- /Event Listeners -->

        <!-- Extensions -->
        <service id="Nosto\NostoIntegration\Twig\Extension\CustomerExtension" public="true">
            <tag name="twig.extension" />
        </service>

        <service id="Nosto\NostoIntegration\Twig\Extension\NostoExtension" public="true">
            <tag name="twig.extension" />

            <argument type="service" id="Nosto\NostoIntegration\Model\Nosto\Entity\Product\CachedProvider" />
            <argument type="service" id="monolog.logger.nosto_integration" />
            <argument type="service" id="sales_channel.product.repository" />
        </service>
        <!-- /Extensions -->

        <!-- Controllers -->
        <service id="Nosto\NostoIntegration\Api\Controller\NostoController" public="true">
            <argument key="$cache" type="service" id="cache.object" />

            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="Nosto\NostoIntegration\Api\Controller\NostoCategoriesController" public="true">
            <argument key="$categoryRepository" type="service" id="category.repository" />

            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="Nosto\NostoIntegration\Api\Controller\NostoDebugController" autowire="true">
            <tag name="controller.service_arguments" />

            <call method="setContainer">
                <argument id="service_container" type="service" />
            </call>
        </service>

        <!-- Routes -->
        <service id="Nosto\NostoIntegration\Api\Route\NostoSyncRoute" public="true">
            <argument key="$jobRepository" type="service" id="nosto_scheduler_job.repository" />
        </service>

        <service id="Nosto\NostoIntegration\Entity\CheckoutMapping\CheckoutMappingDefinition" public="true">
            <tag name="shopware.entity.definition" entity="nosto_integration_checkout_mapping" />
        </service>

        <!-- Cart restoration stuff -->
        <service id="Nosto\NostoIntegration\Controller\Storefront\CartController" public="true">
            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <service id="Nosto\NostoIntegration\Storefront\Checkout\Cart\RestoreUrlService\RestoreUrlService" public="true">
            <argument key="$mappingRepository" type="service" id="nosto_integration_checkout_mapping.repository" />
            <argument key="$urlGenerator" type="service" id="router.default" />
        </service>

        <service id="Nosto\NostoIntegration\Storefront\Checkout\Cart\RestorerService\RestorerService" public="true">
            <argument key="$mappingRepository" type="service" id="nosto_integration_checkout_mapping.repository" />
            <argument key="$orderRepository" type="service" id="order.repository" />
            <argument key="$logger" type="service" id="monolog.logger.nosto_integration" />
        </service>
        <!-- /Cart restoration stuff -->

        <!-- Symfony -->
        <service
            id="Symfony\Component\DependencyInjection\ContainerInterface"
            alias="service_container"
        />
        <service
            id="Symfony\Component\EventDispatcher\EventDispatcherInterface"
            alias="event_dispatcher"
        />
        <service
            id="Symfony\Component\HttpFoundation\RequestStack"
            alias="request_stack"
        />
    </services>
</container>
